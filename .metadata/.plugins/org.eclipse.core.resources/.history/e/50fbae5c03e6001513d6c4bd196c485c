package finalWorks;

import java.util.Arrays;
import java.util.Scanner;

public class birds {

	static String[][] birdsArray = new String[10][6];
	static final int lENGTH = 5;
	final static String INDEX = "¹";
	final static String TYPE = "Type birds: ";
	final static String ON_STOCK =   "On stock: ";
	final static String BAY = "Bay (in stock): ";
	final static String SELL = "Sell (out stock): ";
	final static String PRICE = "Price, $ ";

	public static void main(String[] args) {
		errorbirdsArray();
		birdsArrayFill();
		ArrayFill();
		additionArray();
		recalculation(2);
		printArray();
		enterBay();
		enterSell("Duck", 10);
		printArray();
	}

	static String[][] birds = new String[][] {
			{ "Type", "On stock:", "Bay (on stock)", "Sell (out stock):", "Price, $" },
			{ "Eagle", "10", "15", "5", "15" }, { "Duck", "15", "25", "10", "3" } };
			
	static void enterBay() {
		Scanner sc = new Scanner (System.in);
		System.out.println("Please! Enter type birds which, you want to bay");
		String type = sc.next();
		sc.close();
		Scanner si = new Scanner (System.in);
		System.out.println("Please! Enter number birds which, you want to bay");
		int bay = si.nextInt();
		sc.close();
		for (int i = 0; i<findNull(); i++) {
			if (birdsArray[i][1].equals(type)) {
				birdsArray[i][3] = Integer.toString(new Integer(birdsArray[i][3])+bay);
				recalculation (i);
			}
		}
	}
	
	static void enterSell(String type, int bay) {
		for (int i = 0; i<findNull(); i++) {
			if (birdsArray[i][1].equals(type)) {
				birdsArray[i][4] = Integer.toString(new Integer(birdsArray[i][4])+bay);
				recalculation (i);
			}
		}
	}

	static void recalculation (int k) {
			int a = new Integer(birdsArray[k][2]);
			int b = new Integer(birdsArray[k][3]);
			int c = new Integer(birdsArray[k][4]);
			if (a != (b-c)) {
				String onStock = null;
				onStock = Integer.toString(b-c);
				birdsArray[k][2]=onStock;
			}
		}

			
	static void additionArray() {
		String[] newBirds = new String[] { "Fenix", "5", "5", "0", "100" };
		erroradditionArray(newBirds);
		ArrayFillNew(newBirds);
	}
	
	static int findNull () {
		int j = 0;
		for (int i = 0; i < birdsArray.length; i++) {
			if (birdsArray[i][0] == null) {
				j = i;
				break;
			}
		}
		return j;
	}

	static void ArrayFillNew(String[] newBirds) {
		int j = findNull();
		System.arraycopy(newBirds, 0, birdsArray[j], 1, newBirds.length);
		birdsArrayIndex(j);

	}

	static void erroradditionArray(String[] newBirds) {
		int sum = 0;
		for (int i = 0; i < birdsArray.length; i++) {
			if (birdsArray[i][0] == null)
				sum += 1;
		}
		if (sum < 1) {
			System.out.println("Error of langth main array");
			System.exit(0);
		}
		if (sum >= 1 & sum <= 3) {
			System.out.println("Attention! Array has onli " + sum + " free line");
		}
	}

	static void printArray() {
		for (int k = 0; k < birdsArray[0].length; k++) {
			System.out.print(birdsArray[0][k] + "\t");
		}
		System.out.print("\n");
		for (int i = 1; i < birdsArray.length; i++) {
			if (birdsArray[i][0] == null) {
				break;
			}
			System.out.printf("%2s", birdsArray[i][0] + "\t");
			System.out.printf("%3s", birdsArray[i][1] + "\t" + "\t");
			System.out.printf("%-3s", birdsArray[i][2] + "\t" + "\t");
			System.out.printf("%-3s", birdsArray[i][3] + "\t" + "\t" + "\t");
			System.out.printf("%-3s", birdsArray[i][4] + "\t" + "\t" + "\t");
			System.out.printf("%-3s%n", birdsArray[i][5]);
		}
	}

	static void birdsArrayFill() {
		birdsArray[0][0] = INDEX;
		birdsArray[0][1] = TYPE;
		birdsArray[0][2] = ON_STOCK;
		birdsArray[0][3] = BAY;
		birdsArray[0][4] = SELL;
		birdsArray[0][5] = PRICE;
	}

	static void ArrayFill() {
		for (int i = 1, k = 1; i < birds.length; i++, k++) {
			System.arraycopy(birds[i], 0, birdsArray[k], 1, birds[i].length);
			birdsArrayIndex(k);
		}
	}

	static void birdsArrayIndex(int i) {
		birdsArray[i][0] = Integer.toString(i);
	}

	static void errorbirdsArray() {
		if (birdsArray == null || birdsArray.length == 0) {
			System.out.println("Error data");
			System.exit(1);
		}
	}

}
